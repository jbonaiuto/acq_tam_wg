package acq_tam_wg.WGCritic.v1_1_1.src;

/*********************************/
/*                               */
/*   Importing all Nsl classes   */
/*                               */
/*********************************/

import nslj.src.system.*;
import nslj.src.cmd.*;
import nslj.src.lang.*;
import nslj.src.math.*;
import nslj.src.display.*;
import nslj.src.display.j3d.*;

/*********************************/

public class WGCritic extends NslJavaModule{

//NSL Version: 3_0_n
//Sif Version: 9
//libNickName: acq_tam_wg
//moduleName:  WGCritic
//versionName: 1_1_1
//floatSubModules: true


//variables 
public  NslDinDouble1 rewards; // 
public  NslDinDouble1 motivations; // 
private int lastNodeId; // 
private double gamma; // 
private double[] rewardsWm; // 
private double[] motivationWm; // 
public  NslDinInt0 currentNodeId; // 
public  NslDinDouble0 lastNodeDist; // 
public  NslDinDouble1 currentNodeDesirability; // 
public  NslDoutDouble1 reinforcement; // 
public  NslDinDouble1 lastNodeDesirability; // 

//methods 
public void initModule()
{
	gamma=0.9;
}

public void reset()
{
	lastNodeId=-1;
	rewardsWm= new  double[numDrives];
	motivationWm= new  double[numDrives];
}


public void simTrain()
{
	if(system.getCurrentTime()<system.getDelta())
		reset();
	updateNodeReinforcement();
	lastNodeId=currentNodeId.get();
}

protected void updateNodeReinforcement()
{
	for(int i=0; i<numDrives; i++)
	{
		reinforcement.set(i,0);
		if(lastNodeId!=currentNodeId.get()&&lastNodeId>-1)
		{
			reinforcement.set(i,rewardsWm[i]+(motivations.get(i)-d_min[i])/(d_max[i]-d_min[i])*(gamma*currentNodeDesirability.get(i)-lastNodeDesirability.get(i)));
			rewardsWm[i]=rewards.get(i)*motivationWm[i];
		}
		else
			rewardsWm[i]=rewardsWm[i]+rewards.get(i)*motivationWm[i];
		
		motivationWm[i]=motivations.get(i);
		
	}
}

public double[] getFinalReinforcement()
{
	return rewardsWm;
}
public void makeConn(){
}

	/******************************************************/
	/*                                                    */
	/* Generated by nslc.src.NslCompiler. Do not edit these lines! */
	/*                                                    */
	/******************************************************/

	/* Constructor and related methods */
	/* makeinst() declared variables */

	/* Formal parameters */
	int numDrives;
	double[] d_min;
	double[] d_max;

	/* Temporary variables */

	/* GENERIC CONSTRUCTOR: */
	public WGCritic(String nslName, NslModule nslParent, int numDrives, double[] d_min, double[] d_max)
{
		super(nslName, nslParent);
		this.numDrives=numDrives;
		this.d_min=d_min;
		this.d_max=d_max;
		initSys();
		makeInstWGCritic(nslName, nslParent, numDrives, d_min, d_max);
	}

	public void makeInstWGCritic(String nslName, NslModule nslParent, int numDrives, double[] d_min, double[] d_max)
{ 
		Object[] nslArgs=new Object[]{numDrives, d_min, d_max};
		callFromConstructorTop(nslArgs);
		rewards = new NslDinDouble1("rewards", this, numDrives);
		motivations = new NslDinDouble1("motivations", this, numDrives);
		currentNodeId = new NslDinInt0("currentNodeId", this);
		lastNodeDist = new NslDinDouble0("lastNodeDist", this);
		currentNodeDesirability = new NslDinDouble1("currentNodeDesirability", this, numDrives);
		reinforcement = new NslDoutDouble1("reinforcement", this, numDrives);
		lastNodeDesirability = new NslDinDouble1("lastNodeDesirability", this, numDrives);
		callFromConstructorBottom();
	}

	/******************************************************/
	/*                                                    */
	/* End of automatic declaration statements.           */
	/*                                                    */
	/******************************************************/


}//end WGCritic

