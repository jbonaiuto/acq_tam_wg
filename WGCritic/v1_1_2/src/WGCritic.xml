<module>
	<library>acq_tam_wg</library>
	<name>WGCritic</name>
	<version>1_1_2</version>
	<type>NslJavaModule</type>
	<arguments>int maxNodes, int numDrives, double[] d_min, double[] d_max, double maxDesirability</arguments>
	<buffering>true</buffering>
	<imports>
	</imports>
	<variables>
		<variable type="BasicVariable">
			<name>nodeDesirability</name>
			<access>private</access>
			<scope>local</scope>
			<constant>false</constant>
			<categoryType>NslDouble</categoryType>
			<dimensions>2</dimensions>
			<type>NslDouble2</type>
			<params>maxNodes, numDrives</params>
			<inits></inits>
			<comment></comment>
		</variable>
		<variable type="BasicVariable">
			<name>currentNodeId</name>
			<access>private</access>
			<scope>local</scope>
			<constant>false</constant>
			<categoryType>int</categoryType>
			<dimensions>0</dimensions>
			<type>int</type>
			<params></params>
			<inits></inits>
			<comment></comment>
		</variable>
		<variable type="BasicVariable">
			<name>lastNodeId</name>
			<access>private</access>
			<scope>local</scope>
			<constant>false</constant>
			<categoryType>int</categoryType>
			<dimensions>0</dimensions>
			<type>int</type>
			<params></params>
			<inits></inits>
			<comment></comment>
		</variable>
		<variable type="BasicVariable">
			<name>alpha</name>
			<access>private</access>
			<scope>local</scope>
			<constant>false</constant>
			<categoryType>double</categoryType>
			<dimensions>0</dimensions>
			<type>double</type>
			<params></params>
			<inits></inits>
			<comment></comment>
		</variable>
		<variable type="BasicVariable">
			<name>appetitiveDriveGamma</name>
			<access>private</access>
			<scope>local</scope>
			<constant>false</constant>
			<categoryType>double</categoryType>
			<dimensions>0</dimensions>
			<type>double</type>
			<params></params>
			<inits></inits>
			<comment></comment>
		</variable>
		<variable type="InputPort">
			<name>rewards</name>
			<access>public</access>
			<scope>local</scope>
			<constant>false</constant>
			<categoryType>NslDinDouble</categoryType>
			<dimensions>1</dimensions>
			<type>NslDinDouble1</type>
			<params>numDrives</params>
			<inits></inits>
			<comment></comment>
			<buffering>false</buffering>
			<iconDirection>L</iconDirection>
			<schDirection>L</schDirection>
			<signalType>E</signalType>
		</variable>
		<variable type="InputPort">
			<name>motivations</name>
			<access>public</access>
			<scope>local</scope>
			<constant>false</constant>
			<categoryType>NslDinDouble</categoryType>
			<dimensions>1</dimensions>
			<type>NslDinDouble1</type>
			<params>numDrives</params>
			<inits></inits>
			<comment></comment>
			<buffering>false</buffering>
			<iconDirection>L</iconDirection>
			<schDirection>L</schDirection>
			<signalType>E</signalType>
		</variable>
		<variable type="InputPort">
			<name>currentNodeIdIn</name>
			<access>public</access>
			<scope>local</scope>
			<constant>false</constant>
			<categoryType>NslDinInt</categoryType>
			<dimensions>0</dimensions>
			<type>NslDinInt0</type>
			<params></params>
			<inits></inits>
			<comment></comment>
			<buffering>false</buffering>
			<iconDirection>L</iconDirection>
			<schDirection>L</schDirection>
			<signalType>E</signalType>
		</variable>
		<variable type="InputPort">
			<name>lastNodeDist</name>
			<access>public</access>
			<scope>local</scope>
			<constant>false</constant>
			<categoryType>NslDinDouble</categoryType>
			<dimensions>0</dimensions>
			<type>NslDinDouble0</type>
			<params></params>
			<inits></inits>
			<comment></comment>
			<buffering>false</buffering>
			<iconDirection>L</iconDirection>
			<schDirection>L</schDirection>
			<signalType>E</signalType>
		</variable>
		<variable type="OutputPort">
			<name>reinforcement</name>
			<access>public</access>
			<scope>local</scope>
			<constant>false</constant>
			<categoryType>NslDoutDouble</categoryType>
			<dimensions>1</dimensions>
			<type>NslDoutDouble1</type>
			<params>numDrives</params>
			<inits></inits>
			<comment></comment>
			<buffering>false</buffering>
			<iconDirection>L</iconDirection>
			<schDirection>L</schDirection>
			<signalType>O</signalType>
		</variable>
		<variable type="BasicVariable">
			<name>aversiveDriveGamma</name>
			<access>private</access>
			<scope>local</scope>
			<constant>false</constant>
			<categoryType>double</categoryType>
			<dimensions>0</dimensions>
			<type>double</type>
			<params></params>
			<inits></inits>
			<comment></comment>
		</variable>
	</variables>
	<icon>
		<library>acq_tam_wg</library>
		<module>WGCritic</module>
		<version>1_1_2</version>
		<bounds>
			<min>
				<x>0</x>
				<y>0</y>
			</min>
			<max>
				<x>140</x>
				<y>76</y>
			</max>
		</bounds>
		<shape>
			<min>
				<x>24</x>
				<y>0</y>
			</min>
			<max>
				<x>116</x>
				<y>76</y>
			</max>
		</shape>
		<parts>
			<part type="rect">
				<bounds>
					<min>
						<x>24</x>
						<y>0</y>
					</min>
					<max>
						<x>116</x>
						<y>76</y>
					</max>
				</bounds>
				<color>-1</color>
				<coordinates>
					<coordinate>
						<x>24</x>
						<y>0</y>
					</coordinate>
					<coordinate>
						<x>116</x>
						<y>76</y>
					</coordinate>
				</coordinates>
			</part>
			<part type="NslDinDouble1">
				<name>rewards</name>
				<parameters>numDrives</parameters>
				<portDirection>L</portDirection>
				<signalType>E</signalType>
				<bounds>
					<min>
						<x>0</x>
						<y>31</y>
					</min>
					<max>
						<x>24</x>
						<y>31</y>
					</max>
				</bounds>
				<color>-16711936</color>
				<coordinates>
					<coordinate>
						<x>0</x>
						<y>31</y>
					</coordinate>
					<coordinate>
						<x>24</x>
						<y>31</y>
					</coordinate>
				</coordinates>
			</part>
			<part type="NslDinDouble1">
				<name>motivations</name>
				<parameters>numDrives</parameters>
				<portDirection>L</portDirection>
				<signalType>E</signalType>
				<bounds>
					<min>
						<x>0</x>
						<y>14</y>
					</min>
					<max>
						<x>24</x>
						<y>14</y>
					</max>
				</bounds>
				<color>-16711936</color>
				<coordinates>
					<coordinate>
						<x>0</x>
						<y>14</y>
					</coordinate>
					<coordinate>
						<x>24</x>
						<y>14</y>
					</coordinate>
				</coordinates>
			</part>
			<part type="NslDinInt0">
				<name>currentNodeIdIn</name>
				<parameters></parameters>
				<portDirection>L</portDirection>
				<signalType>E</signalType>
				<bounds>
					<min>
						<x>0</x>
						<y>61</y>
					</min>
					<max>
						<x>24</x>
						<y>61</y>
					</max>
				</bounds>
				<color>-16711936</color>
				<coordinates>
					<coordinate>
						<x>0</x>
						<y>61</y>
					</coordinate>
					<coordinate>
						<x>24</x>
						<y>61</y>
					</coordinate>
				</coordinates>
			</part>
			<part type="NslDinDouble0">
				<name>lastNodeDist</name>
				<parameters></parameters>
				<portDirection>L</portDirection>
				<signalType>E</signalType>
				<bounds>
					<min>
						<x>0</x>
						<y>44</y>
					</min>
					<max>
						<x>24</x>
						<y>44</y>
					</max>
				</bounds>
				<color>-16711936</color>
				<coordinates>
					<coordinate>
						<x>0</x>
						<y>44</y>
					</coordinate>
					<coordinate>
						<x>24</x>
						<y>44</y>
					</coordinate>
				</coordinates>
			</part>
			<part type="NslDoutDouble1">
				<name>reinforcement</name>
				<parameters>numDrives</parameters>
				<portDirection>L</portDirection>
				<signalType>O</signalType>
				<bounds>
					<min>
						<x>116</x>
						<y>38</y>
					</min>
					<max>
						<x>140</x>
						<y>38</y>
					</max>
				</bounds>
				<color>-16711936</color>
				<coordinates>
					<coordinate>
						<x>116</x>
						<y>38</y>
					</coordinate>
					<coordinate>
						<x>140</x>
						<y>38</y>
					</coordinate>
				</coordinates>
			</part>
		</parts>
	</icon>
	<schematic>
		<inports>
			<inport>
				<name>rewards</name>
				<type>NslDinDouble1</type>
				<parameters>numDrives</parameters>
				<portDirection>L</portDirection>
				<corners>
					<corner>
						<x>72</x>
						<y>24</y>
					</corner>
					<corner>
						<x>84</x>
						<y>24</y>
					</corner>
					<corner>
						<x>96</x>
						<y>40</y>
					</corner>
					<corner>
						<x>84</x>
						<y>56</y>
					</corner>
					<corner>
						<x>72</x>
						<y>56</y>
					</corner>
				</corners>
				<bounds>
					<min>
						<x>96</x>
						<y>40</y>
					</min>
					<max>
						<x>112</x>
						<y>40</y>
					</max>
				</bounds>
			</inport>
			<inport>
				<name>motivations</name>
				<type>NslDinDouble1</type>
				<parameters>numDrives</parameters>
				<portDirection>L</portDirection>
				<corners>
					<corner>
						<x>72</x>
						<y>88</y>
					</corner>
					<corner>
						<x>84</x>
						<y>88</y>
					</corner>
					<corner>
						<x>96</x>
						<y>104</y>
					</corner>
					<corner>
						<x>84</x>
						<y>120</y>
					</corner>
					<corner>
						<x>72</x>
						<y>120</y>
					</corner>
				</corners>
				<bounds>
					<min>
						<x>96</x>
						<y>104</y>
					</min>
					<max>
						<x>112</x>
						<y>104</y>
					</max>
				</bounds>
			</inport>
			<inport>
				<name>currentNodeIdIn</name>
				<type>NslDinInt0</type>
				<parameters></parameters>
				<portDirection>L</portDirection>
				<corners>
					<corner>
						<x>72</x>
						<y>152</y>
					</corner>
					<corner>
						<x>84</x>
						<y>152</y>
					</corner>
					<corner>
						<x>96</x>
						<y>168</y>
					</corner>
					<corner>
						<x>84</x>
						<y>184</y>
					</corner>
					<corner>
						<x>72</x>
						<y>184</y>
					</corner>
				</corners>
				<bounds>
					<min>
						<x>96</x>
						<y>168</y>
					</min>
					<max>
						<x>112</x>
						<y>168</y>
					</max>
				</bounds>
			</inport>
			<inport>
				<name>lastNodeDist</name>
				<type>NslDinDouble0</type>
				<parameters></parameters>
				<portDirection>L</portDirection>
				<corners>
					<corner>
						<x>72</x>
						<y>224</y>
					</corner>
					<corner>
						<x>84</x>
						<y>224</y>
					</corner>
					<corner>
						<x>96</x>
						<y>240</y>
					</corner>
					<corner>
						<x>84</x>
						<y>256</y>
					</corner>
					<corner>
						<x>72</x>
						<y>256</y>
					</corner>
				</corners>
				<bounds>
					<min>
						<x>96</x>
						<y>240</y>
					</min>
					<max>
						<x>112</x>
						<y>240</y>
					</max>
				</bounds>
			</inport>
		</inports>
		<outports>
			<outport>
				<name>reinforcement</name>
				<type>NslDoutDouble1</type>
				<parameters>numDrives</parameters>
				<portDirection>L</portDirection>
				<corners>
					<corner>
						<x>600</x>
						<y>136</y>
					</corner>
					<corner>
						<x>612</x>
						<y>136</y>
					</corner>
					<corner>
						<x>624</x>
						<y>152</y>
					</corner>
					<corner>
						<x>612</x>
						<y>168</y>
					</corner>
					<corner>
						<x>600</x>
						<y>168</y>
					</corner>
				</corners>
				<bounds>
					<min>
						<x>584</x>
						<y>152</y>
					</min>
					<max>
						<x>600</x>
						<y>152</y>
					</max>
				</bounds>
			</outport>
		</outports>
		<textObjects>
		</textObjects>
		<icons>
		</icons>
		<connections>
		</connections>
	</schematic>
	<nslm>
		<extends></extends>
		<extendsParams></extendsParams>
		<implements></implements>
		<comment></comment>
		<methods>/**
 * Executed when the module is initialized
 */
public void initModule()
{
	// learning rate
	alpha=0.3;
	// discount rate
	appetitiveDriveGamma=0.9;
	aversiveDriveGamma=0.01;
}

/**
 * Reset internal variables
*/
public void reset()
{
	// Reset node IDs
	lastNodeId=-1;
	currentNodeId=-1;
}

/**
 * Executed before each training epoch
 */
public void initTrain()
{
	reset();
}

/**
 * Executed at the start of each run epoch
 */
public void initRun()
{
	reset();
}

/**
 * Executed during each training cycle
 */
public void simTrain()
{
	// Update node IDs
	updateNodeIds();

	// Update desirability
	updateNodeValues();

	// Update reinforcement
	updateReinforcement();
}

/**
 * Executed during each run cycle
 */
public void simRun()
{
	// Update node IDs
	updateNodeIds();

	// Update reinforcement
	updateReinforcement();
}

/**
 * Update currrent and last node ID
 */
protected void updateNodeIds()
{
	if(currentNodeIdIn.get()&gt;-1)
	{
		if(currentNodeIdIn.get()!=currentNodeId &amp;&amp; currentNodeId&gt;-1)
			lastNodeId=currentNodeId;
		currentNodeId=currentNodeIdIn.get();
	}
}

/**
 * Update reinforcement output signal
 */
protected void updateReinforcement()
{
	if(currentNodeIdIn.get()&gt;-1)
		reinforcement.set(nodeDesirability.get(currentNodeId));
}

/**
 * Update value of last node
 */
protected void updateNodeValues()
{
	// For each drive
	for(int i=0; i&lt;numDrives; i++)
	{
		// Initialize TD error
		double tdError=0;

		// If we know what node we're in
		if(currentNodeIdIn.get()&gt;-1)
		{
			// If we've moved to a new node, update the last node's desirability
			if(lastNodeId!=currentNodeIdIn.get() &amp;&amp; lastNodeId&gt;-1)
			{
				// compute TD error
				if(i&lt;2)
					tdError=(motivations.get(i)-d_min[i])/(d_max[i]-d_min[i])*(/*nslPow(*/appetitiveDriveGamma/*,lastNodeDist.get()/10.0)*/*nodeDesirability.get(currentNodeIdIn.get(),i)-nodeDesirability.get(lastNodeId,i));
				else
					tdError=(motivations.get(i)-d_min[i])/(d_max[i]-d_min[i])*(/*nslPow(*/aversiveDriveGamma/*,lastNodeDist.get()/10.0)*/*nodeDesirability.get(currentNodeIdIn.get(),i)-nodeDesirability.get(lastNodeId,i));

				// update last node value
				nodeDesirability.set(lastNodeId, i,nslMax(-d_max[i], nslMin(d_max[i], nodeDesirability.get(lastNodeId, i)+alpha*tdError)));
			}

			// Compute TD error for current node
			tdError=rewards.get(i)*(motivations.get(i)-d_min[i])/(d_max[i]-d_min[i]);

			// Update current node with rewards
			nodeDesirability.set(currentNodeIdIn.get(), i, nslMax(-d_max[i], nslMin(d_max[i], nodeDesirability.get(currentNodeIdIn.get(), i)+alpha*tdError)));
		}
	}
}

/**
 * Save node values to files
 */
public void saveWeights(String filename)
{
	NslTextFile file(filename);
	file.open('W');
	for(int i=0; i&lt;maxNodes; i++)
	{
		for(int j=0; j&lt;numDrives; j++)
		{
			file.puts(nodeDesirability.get(i, j));
		}
	}
	file.flush();
	file.close();
}

/**
 * Load node values from file
 */
public void loadWeights(String filename)
{
	NslTextFile file(filename);
	file.open('R');
	for(int i=0; i&lt;maxNodes; i++)
	{
		for(int j=0; j&lt;numDrives; j++)
		{
			nodeDesirability.set(i, j, Double.parseDouble(file.gets()));
		}
	}
	file.close();
}
</methods>
	</nslm>
</module>
