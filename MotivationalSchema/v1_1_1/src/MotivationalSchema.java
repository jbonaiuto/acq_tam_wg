package acq_tam_wg.MotivationalSchema.v1_1_1.src;
import acq_tam_wg.Hypothalamus.v1_1_1.src.*;
import acq_tam_wg.TAMCritic.v1_1_1.src.*;
import acq_tam_wg.WGCritic.v1_1_1.src.*;

/*********************************/
/*                               */
/*   Importing all Nsl classes   */
/*                               */
/*********************************/

import nslj.src.system.*;
import nslj.src.cmd.*;
import nslj.src.lang.*;
import nslj.src.math.*;
import nslj.src.display.*;
import nslj.src.display.j3d.*;

/*********************************/

public class MotivationalSchema extends NslJavaModule{

//NSL Version: 3_0_n
//Sif Version: 9
//libNickName: acq_tam_wg
//moduleName:  MotivationalSchema
//versionName: 1_1_1
//floatSubModules: true


//variables 
public  acq_tam_wg.Hypothalamus.v1_1_1.src.Hypothalamus hypothalamus; // 
public  acq_tam_wg.TAMCritic.v1_1_1.src.TAMCritic tamCritic; // 
public  NslDinDouble1 reductions; // 
public  NslDinDouble1 incentives; // 
public  NslDoutDouble1 motivationalState; // 
public  acq_tam_wg.WGCritic.v1_1_1.src.WGCritic wgCritic; // 
public  NslDinInt0 currentNodeId; // 
public  NslDinDouble0 lastNodeDist; // 
public  NslDinDouble1 currentNodeDesirability; // 
public  NslDoutDouble1 nodeReinforcement; // 
public  NslDinDouble1 lastNodeDesirability; // 
public  NslDinDouble2 currentLocalDesirability; // 
public  NslDoutDouble1 tamReinforcement; // 

//methods 

public void makeConn(){
    nslConnect(reductions,hypothalamus.reductions);
    nslConnect(reductions,tamCritic.rewards);
    nslConnect(reductions,wgCritic.rewards);
    nslConnect(lastNodeDist,wgCritic.lastNodeDist);
    nslConnect(incentives,hypothalamus.incentives);
    nslConnect(currentNodeDesirability,wgCritic.currentNodeDesirability);
    nslConnect(currentNodeId,wgCritic.currentNodeId);
    nslConnect(currentNodeId,tamCritic.currentNodeId);
    nslConnect(lastNodeDesirability,wgCritic.lastNodeDesirability);
    nslConnect(currentLocalDesirability,tamCritic.currentDesirability);
    nslConnect(hypothalamus.drives,tamCritic.motivations);
    nslConnect(hypothalamus.drives,motivationalState);
    nslConnect(hypothalamus.drives,wgCritic.motivations);
    nslConnect(tamCritic.reinforcement,tamReinforcement);
    nslConnect(wgCritic.reinforcement,nodeReinforcement);
}

	/******************************************************/
	/*                                                    */
	/* Generated by nslc.src.NslCompiler. Do not edit these lines! */
	/*                                                    */
	/******************************************************/

	/* Constructor and related methods */
	/* makeinst() declared variables */

	/* Formal parameters */
	int numDrives;
	int angleRepSize;
	int mapSize;
	double[] d_min;
	double[] d_max;

	/* Temporary variables */

	/* GENERIC CONSTRUCTOR: */
	public MotivationalSchema(String nslName, NslModule nslParent, int numDrives, int angleRepSize, int mapSize, double[] d_min, double[] d_max)
{
		super(nslName, nslParent);
		this.numDrives=numDrives;
		this.angleRepSize=angleRepSize;
		this.mapSize=mapSize;
		this.d_min=d_min;
		this.d_max=d_max;
		initSys();
		makeInstMotivationalSchema(nslName, nslParent, numDrives, angleRepSize, mapSize, d_min, d_max);
	}

	public void makeInstMotivationalSchema(String nslName, NslModule nslParent, int numDrives, int angleRepSize, int mapSize, double[] d_min, double[] d_max)
{ 
		Object[] nslArgs=new Object[]{numDrives, angleRepSize, mapSize, d_min, d_max};
		callFromConstructorTop(nslArgs);
		hypothalamus = new acq_tam_wg.Hypothalamus.v1_1_1.src.Hypothalamus("hypothalamus", this, numDrives, d_min, d_max);
		tamCritic = new acq_tam_wg.TAMCritic.v1_1_1.src.TAMCritic("tamCritic", this, angleRepSize, numDrives, d_min, d_max);
		reductions = new NslDinDouble1("reductions", this, numDrives);
		incentives = new NslDinDouble1("incentives", this, numDrives);
		motivationalState = new NslDoutDouble1("motivationalState", this, numDrives);
		wgCritic = new acq_tam_wg.WGCritic.v1_1_1.src.WGCritic("wgCritic", this, numDrives, d_min, d_max);
		currentNodeId = new NslDinInt0("currentNodeId", this);
		lastNodeDist = new NslDinDouble0("lastNodeDist", this);
		currentNodeDesirability = new NslDinDouble1("currentNodeDesirability", this, numDrives);
		nodeReinforcement = new NslDoutDouble1("nodeReinforcement", this, numDrives);
		lastNodeDesirability = new NslDinDouble1("lastNodeDesirability", this, numDrives);
		currentLocalDesirability = new NslDinDouble2("currentLocalDesirability", this, numDrives, angleRepSize);
		tamReinforcement = new NslDoutDouble1("tamReinforcement", this, numDrives);
		callFromConstructorBottom();
	}

	/******************************************************/
	/*                                                    */
	/* End of automatic declaration statements.           */
	/*                                                    */
	/******************************************************/


}//end MotivationalSchema

