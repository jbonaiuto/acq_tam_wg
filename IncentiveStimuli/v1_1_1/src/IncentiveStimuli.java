package acq_tam_wg.IncentiveStimuli.v1_1_1.src;

/*********************************/
/*                               */
/*   Importing all Nsl classes   */
/*                               */
/*********************************/

import nslj.src.system.*;
import nslj.src.cmd.*;
import nslj.src.lang.*;
import nslj.src.math.*;
import nslj.src.display.*;
import nslj.src.display.j3d.*;

/*********************************/

public class IncentiveStimuli extends NslJavaModule{

//NSL Version: 3_0_n
//Sif Version: 9
//libNickName: acq_tam_wg
//moduleName:  IncentiveStimuli
//versionName: 1_1_1
//floatSubModules: true


//variables 
public  NslDinDouble2 incentivePosition; // 
public  NslDinDouble1 currentPosition; // 
public  NslDinDouble1 motivationalState; // 
public  NslDoutDouble1 incentiveDirection; // 
private double maxIncentive; // 

//methods 
public void initModule()
{
	maxIncentive=1.0;
	nslAddSpatialCanvas("output", "incentive", incentiveDirection, 0.0, 1.0);
}

public void simTrain()
{
	process();
}

public void simRun()
{
	process();
}

protected void process()
{
	incentiveDirection.set(0);
	for(int i=0; i<numDrives; i++)
	{
		//if(!Double.isNaN(incentivePosition.get(i,0)) && !Double.isNaN(orientationDecoder.output.get()))
		if(!Double.isNaN(incentivePosition.get(i,0)))
		{
			// Compute angle between current position and incentive position
			double[] baseVec= new  double[]{1,0};
			double[] directionVec= new  double[]{-incentivePosition.get(i,1)+currentPosition.get(1),-incentivePosition.get(i,0)+currentPosition.get(0)};
			double angle=(Math.PI+NslOperator.atan2.eval(directionVec[1],directionVec[0])-NslOperator.atan2.eval(baseVec[1],baseVec[0]))%(Math.PI*2.0);
			if(angle<0)
				angle=Math.PI*2.0+angle;

			// Get relative angle between current orientation and incentive direction
			//double relAngle=getRelativeAngle(orientationDecoder.output.get(), angle);

			for(int j=0; j<size; j++)
			{
				//double prefAngle=-Math.PI+j*(2*Math.PI/(size-1));
				double prefAngle=0+j*(2*Math.PI/(size-1));
				//double dist=getDist(relAngle, prefAngle, -Math.PI, Math.PI);
				double dist=getDist(angle, prefAngle, 0, 2*Math.PI);
				incentiveDirection.set(j, incentiveDirection.get(j)+maxIncentive*motivationalState.get(i)*NslOperator.exp.eval(-NslOperator.pow.eval(dist,2)/(2*sigma*sigma)));
			}
		}
	}
}

protected double getDist(double ang1, double ang2, double min, double max)
{
	double dist=(ang1-ang2)%(2*Math.PI+0.001);
	double altDist=dist;
	if(ang1<ang2)
		altDist=max-ang2+ang1-min;
	else if(ang2<ang1)
		altDist=max-ang1+ang2-min;
	if(NslOperator.abs.eval(altDist)<NslOperator.abs.eval(dist))
		dist=altDist;
	return dist;
}

protected double getRelativeAngle(double ang1, double ang2)
{
	double relativeAngle=0.0;
	if(ang1>ang2)
	{
		double relAngleRight=(ang2-ang1);
		double relAngleLeft=2*Math.PI+relAngleRight;
		if(NslOperator.abs.eval(relAngleRight)<NslOperator.abs.eval(relAngleLeft))
			relativeAngle=relAngleRight;
		else
			relativeAngle=relAngleLeft;
	}
	else
	{
		double relAngleLeft=ang2-ang1;
		double relAngleRight=relAngleLeft-2*Math.PI;
		if(NslOperator.abs.eval(relAngleRight)<NslOperator.abs.eval(relAngleLeft))
			relativeAngle=relAngleRight;
		else
			relativeAngle=relAngleLeft;
	}
	return relativeAngle;
}
public void makeConn(){
}

	/******************************************************/
	/*                                                    */
	/* Generated by nslc.src.NslCompiler. Do not edit these lines! */
	/*                                                    */
	/******************************************************/

	/* Constructor and related methods */
	/* makeinst() declared variables */

	/* Formal parameters */
	int size;
	int numDrives;
	double sigma;

	/* Temporary variables */

	/* GENERIC CONSTRUCTOR: */
	public IncentiveStimuli(String nslName, NslModule nslParent, int size, int numDrives, double sigma)
{
		super(nslName, nslParent);
		this.size=size;
		this.numDrives=numDrives;
		this.sigma=sigma;
		initSys();
		makeInstIncentiveStimuli(nslName, nslParent, size, numDrives, sigma);
	}

	public void makeInstIncentiveStimuli(String nslName, NslModule nslParent, int size, int numDrives, double sigma)
{ 
		Object[] nslArgs=new Object[]{size, numDrives, sigma};
		callFromConstructorTop(nslArgs);
		incentivePosition = new NslDinDouble2("incentivePosition", this, numDrives, 2);
		currentPosition = new NslDinDouble1("currentPosition", this, 2);
		motivationalState = new NslDinDouble1("motivationalState", this, numDrives);
		incentiveDirection = new NslDoutDouble1("incentiveDirection", this, size);
		callFromConstructorBottom();
	}

	/******************************************************/
	/*                                                    */
	/* End of automatic declaration statements.           */
	/*                                                    */
	/******************************************************/


}//end IncentiveStimuli

