package acq_tam_wg.DTN.v1_1_1.src;

/*********************************/
/*                               */
/*   Importing all Nsl classes   */
/*                               */
/*********************************/

import nslj.src.system.*;
import nslj.src.cmd.*;
import nslj.src.lang.*;
import nslj.src.math.*;
import nslj.src.display.*;
import nslj.src.display.j3d.*;

/*********************************/

public class DTN extends NslJavaModule{

//NSL Version: 3_0_n
//Sif Version: 9
//libNickName: acq_tam_wg
//moduleName:  DTN
//versionName: 1_1_1
//floatSubModules: true


//variables 
public  NslDinDouble0 currentOrientation; // 
public  NslDoutDouble1 orientationOut; // 

//methods 
public void initModule()
{
	nslAddSpatialCanvas("output", "head orientation", orientationOut, 0, 1);
	nslSetColumns(1,"output");
}

public void simRun()
{
	process();
}

public void simTrain()
{
	process();
}

protected void process()
{
	for(int i=0; i<size; i++)
	{
		double dirPrefAngle=0+i*(2*Math.PI/(size-1));
		double dist=getDist(dirPrefAngle, currentOrientation.get(),0,2*Math.PI);
		orientationOut.set(i, NslOperator.exp.eval(-NslOperator.pow.eval(dist,2)/(2*sigma*sigma)));
	}
}

protected double getDist(double ang1, double ang2, double min, double max)
{
	double dist=(ang1-ang2)%(2*Math.PI+0.001);
	//double altDist=(ang2-ang1)%(2*Math.PI+0.001);
	double altDist=dist;
	if(ang1<ang2)
		altDist=max-ang2+ang1-min;
	else if(ang2<ang1)
		altDist=max-ang1+ang2-min;
	if(NslOperator.abs.eval(altDist)<NslOperator.abs.eval(dist))
		dist=altDist;
	return dist;
}
public void makeConn(){
}

	/******************************************************/
	/*                                                    */
	/* Generated by nslc.src.NslCompiler. Do not edit these lines! */
	/*                                                    */
	/******************************************************/

	/* Constructor and related methods */
	/* makeinst() declared variables */

	/* Formal parameters */
	int size;
	double sigma;

	/* Temporary variables */

	/* GENERIC CONSTRUCTOR: */
	public DTN(String nslName, NslModule nslParent, int size, double sigma)
{
		super(nslName, nslParent);
		this.size=size;
		this.sigma=sigma;
		initSys();
		makeInstDTN(nslName, nslParent, size, sigma);
	}

	public void makeInstDTN(String nslName, NslModule nslParent, int size, double sigma)
{ 
		Object[] nslArgs=new Object[]{size, sigma};
		callFromConstructorTop(nslArgs);
		currentOrientation = new NslDinDouble0("currentOrientation", this);
		orientationOut = new NslDoutDouble1("orientationOut", this, size);
		callFromConstructorBottom();
	}

	/******************************************************/
	/*                                                    */
	/* End of automatic declaration statements.           */
	/*                                                    */
	/******************************************************/


}//end DTN

